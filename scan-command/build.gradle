/*
 * Copyright (c) 2024, WSO2 LLC. (https://www.wso2.com).
 *
 * WSO2 LLC. licenses this file to you under the Apache License,
 * Version 2.0 (the "License"); you may not use this file except
 * in compliance with the License.
 * You may obtain a copy of the License at
 *
 *   http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing,
 * software distributed under the License is distributed on an
 * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
 * KIND, either express or implied. See the License for the
 * specific language governing permissions and limitations
 * under the License.
 */

import org.apache.tools.ant.taskdefs.condition.Os

import java.nio.file.Paths

plugins {
    id 'java-library'
    id 'checkstyle'
    id 'jacoco'
    id 'maven-publish'
    id 'com.github.spotbugs'
    id 'de.undercouch.download'
}

group = "${group}"
version = "${version}"

repositories {
    mavenLocal()
    mavenCentral()

    maven {
        url = uri('https://repo.maven.apache.org/maven2/')
    }

    maven {
        url = 'https://maven.pkg.github.com/ballerina-platform/*'
        credentials {
            username System.getenv("packageUser")
            password System.getenv("packagePAT")
        }
    }
}

dependencies {
    implementation group: 'info.picocli', name: 'picocli', version: "${picoCLIVersion}"
    implementation "com.google.code.gson:gson:${gsonVersion}"
    implementation group: 'org.ballerinalang', name: 'ballerina-lang', version: "${ballerinaLangVersion}"
    implementation group: 'org.ballerinalang', name: 'ballerina-parser', version: "${ballerinaLangVersion}"
    implementation group: 'org.ballerinalang', name: 'ballerina-runtime', version: "${ballerinaLangVersion}"
    implementation group: 'org.ballerinalang', name: 'ballerina-tools-api', version: "${ballerinaLangVersion}"
    implementation group: 'org.ballerinalang', name: 'jballerina-tools', version: "${ballerinaLangVersion}"
    implementation group: 'org.ballerinalang', name: 'ballerina-cli', version: "${ballerinaLangVersion}"
    implementation group: 'org.ballerinalang', name: 'toml-parser', version: "${ballerinaLangVersion}"

    // Required for determining the platform a java process is running on
    implementation group: 'org.apache.commons', name: 'commons-lang3', version: "${apacheCommonsLang3Version}"

    // For extracting remote JAR files and other file operations
    implementation group: 'commons-io', name: 'commons-io', version: "${commonsIoVersion}"

    // Required dependencies for jacoco
    implementation group: 'org.jacoco', name: 'org.jacoco.core', version: "${jacocoVersion}"
    implementation group: 'org.jacoco', name: 'org.jacoco.report', version: "${jacocoVersion}"

    checkstyle group: 'com.puppycrawl.tools', name: 'checkstyle', version: "${puppycrawlCheckstyleVersion}"

    // Required dependencies for running scan tool tests
    testImplementation group: 'org.testng', name: 'testng', version: "${testngVersion}"

    // For including the scan report zip
    implementation files("${projectDir}/src/main/resources/report.zip")
}

tasks.withType(JavaExec).configureEach {
    systemProperty 'ballerina.home', System.getenv("BALLERINA_HOME")
}

// Setting up checkstyles
tasks.register('downloadCheckstyleRuleFiles', Download) {
    src([
            'https://raw.githubusercontent.com/wso2/code-quality-tools/v1.4/checkstyle/jdk-17/checkstyle.xml',
            'https://raw.githubusercontent.com/wso2/code-quality-tools/v1.4/checkstyle/jdk-17/suppressions.xml'
    ])
    overwrite false
    onlyIfNewer true
    dest buildDir
}

artifacts.add('default', file("${project.buildDir}/checkstyle.xml")) {
    builtBy(downloadCheckstyleRuleFiles)
}

artifacts.add('default', file("${project.buildDir}/suppressions.xml")) {
    builtBy(downloadCheckstyleRuleFiles)
}

def excludePattern = '**/module-info.java'
tasks.withType(Checkstyle).configureEach {
    exclude excludePattern
}

checkstyle {
    toolVersion "${project.puppycrawlCheckstyleVersion}"
    configFile rootProject.file("${project.buildDir}/checkstyle.xml")
    configProperties = ["suppressionFile": file("${project.buildDir}/suppressions.xml")]
}

checkstyleMain.dependsOn(downloadCheckstyleRuleFiles)
checkstyleTest.dependsOn(downloadCheckstyleRuleFiles)

// Setting up spotbugs
spotbugsMain {
    effort "max"
    reportLevel "low"

    reportsDir = file("$project.buildDir/reports/spotbugs")

    reports {
        html.required.set(true)
        text.required.set(true)
    }

    def excludeFile = file("${projectDir}/spotbugs-exclude.xml")
    if (excludeFile.exists()) {
        excludeFilter = excludeFile
    }
}

spotbugsTest {
    effort = "max"
    reportLevel = "low"

    reportsDir = file("$project.buildDir/reports/spotbugs")

    reports {
        html.required.set(true)
        text.required.set(true)
    }

    def excludeFile = file("${projectDir}/spotbugs-exclude.xml")
    if (excludeFile.exists()) {
        excludeFilter = excludeFile
    }
}

// Configurations to automatically build and deploy scan tool
def packageOrg = "ballerina"
def packageName = "tool_scan"
def tomlVersion = "${version}"
def ballerinaTomlFilePlaceHolder = new File("${rootDir}/build-config/resources/Ballerina.toml")
def balToolTomlFilePlaceHolder = new File("${rootDir}/build-config/resources/BalTool.toml")
def ballerinaTomlFile = new File("${projectDir}/tool-scan/Ballerina.toml")
def balToolTomlFile = new File("${projectDir}/tool-scan/BalTool.toml")
def balerinaCentralDir = System.getProperty("user.home") + "/.ballerina/repositories/central.ballerina.io/bala/${packageOrg}"
def ballerinaLocalDir = System.getProperty("user.home") + "/.ballerina/repositories/local/bala/${packageOrg}"
def balCentralCacheDir = project.file(System.getProperty("user.home") + "/.ballerina/repositories/central.ballerina.io")
def ballerinaToolConfigDir = System.getProperty("user.home") + "/.ballerina/.config"
def ballerinaToolConfigToml = System.getProperty("user.home") + "/.ballerina/.config/bal-tools.toml"

tasks.register('updateTomlFiles') {
    // Update the Ballerina.toml and BalTool.toml files
    doLast {
        def newConfig = ballerinaTomlFilePlaceHolder.text.replace("@toml.distribution@", ballerinaLangVersion)
        newConfig = newConfig.replace("@toml.version@", tomlVersion)
        ballerinaTomlFile.text = newConfig

        def newToolConfig = balToolTomlFilePlaceHolder.text.replace("@toml.version@", tomlVersion)
        balToolTomlFile.text = newToolConfig
    }
}

tasks.register('createBallerinaToolConfigFile') {
    // Create the bal-tools.toml file in the .ballerina/.config directory
    def configFileContent = """
        [[tool]]
        id = "scan"
        org = "${packageOrg}"
        name = "${packageName}"
        version = "${version}"
        active = true
    """.stripIndent()

    outputs.upToDateWhen { false }
    doLast {
        if (!file(ballerinaToolConfigToml).exists()) {
            file(ballerinaToolConfigDir).mkdirs()
            file(ballerinaToolConfigToml).createNewFile()
        }

        // Retrieve existing content of toml file
        def tomlFile = file(ballerinaToolConfigToml)
        def tomlFileContent = tomlFile.text

        // Regex to identify existing scan tool entry
        def entryRegex = /\n\[\[tool]]\nid = "scan"\norg = "${packageOrg}"\nname = "${packageName}"\nversion = ".+"\nactive = true/
        def match = tomlFileContent.find(entryRegex)

        if (match) {
            if (tomlFileContent.contains(configFileContent)) {
                println("bal scan tool already exists!")
            } else {
                tomlFileContent = tomlFileContent.replaceFirst(entryRegex, configFileContent)
                tomlFile.text = tomlFileContent
                println("Successfully updated bal-tools.toml with new version of scan tool")
            }
        } else {
            // add scan tool
            tomlFile << "\n" + configFileContent
            println("Successfully created the bal-tools.toml file in the .ballerina/.config directory")
        }
    }
}

tasks.register('buildScanTool') {
    doLast {
        // Pack and push to local repo of distribution
        exec {
            if (Os.isFamily(Os.FAMILY_WINDOWS)) {
                commandLine 'cmd', '/c', 'cd tool-scan & bal pack & bal push --repository=local'
            } else {
                commandLine 'sh', '-c', 'cd tool-scan ; bal pack ; bal push --repository=local'
            }
        }
        println("Successfully build and pushed the scan tool to the local repository")

        // Remove the cache directories in the central repository
        delete {
            fileTree(balCentralCacheDir).matching {
                include 'cache-*'
            }
        }
        println("Successfully cleaned the .ballerina/cache* directories")

        // Update the central repository
        def balDestinationDir = "$balerinaCentralDir/$packageName"
        def balSourceDir = "$ballerinaLocalDir/$packageName"
        if (file(balDestinationDir).exists()) {
            file(balDestinationDir).deleteDir()
        }
        copy {
            from balSourceDir
            into balDestinationDir
        }
        println("Successfully copied package from local/bala the central.ballerina.io/bala directory")
    }
}

createBallerinaToolConfigFile.dependsOn updateTomlFiles
buildScanTool.dependsOn createBallerinaToolConfigFile

build {
    dependsOn updateTomlFiles
    dependsOn createBallerinaToolConfigFile
    dependsOn buildScanTool
}

// Configuring tests
tasks.test {
    systemProperty "ballerina.home", Paths.get(System.getenv("BALLERINA_HOME")).resolve("distributions")
            .resolve("ballerina-${ballerinaLangVersion}").toString()

    useTestNG() {
        suites 'src/test/resources/testng.xml'
    }
}

// Codecove configurations
def execFile = new File("${buildDir}/jacoco/test.exec")
def classFileArray = []
tasks.register('copyExecFilesAndJavaClassFiles') {
    if (execFile.exists()) {
        fileTree("${buildDir}/classes").matching {
            exclude '**/test/*'
            exclude '**/module-info.class'
        }.each { file -> classFileArray.push(file) }
    }
}

tasks.register('createCodeCoverageReport', JacocoReport) {
    executionData file(execFile)
    additionalClassDirs files(classFileArray)

    reports {
        xml.required = true
        html.required = true
        xml.destination new File("${rootDir}/.jacoco/reports/jacoco/report.xml")
        html.destination new File("${rootDir}/.jacoco/reports/jacoco/report.html")
    }
    onlyIf = {
        true
    }
}

createCodeCoverageReport.dependsOn(copyExecFilesAndJavaClassFiles)

// Publish scan tool to central
tasks.register('publishScanPackage') {
    doLast {
        exec {
            if (Os.isFamily(Os.FAMILY_WINDOWS)) {
                commandLine 'cmd', '/c', 'cd tool-scan & bal pack & bal push'
            } else {
                commandLine 'sh', '-c', 'cd tool-scan ; bal pack ; bal push'
            }
        }
        println("Successfully published the scan tool package to central.")
    }
}

// Publish scan tool package to GitHub packages
publishing {
    publications {
        mavenJava(MavenPublication) {
            from components.java
            groupId group
            artifactId project.name
            version version
        }
    }

    repositories {
        maven {
            name = "GitHubPackages"
            url = uri("https://maven.pkg.github.com/ballerina-platform/static-code-analysis-tool")
            credentials {
                username = System.getenv("publishUser")
                password = System.getenv("publishPAT")
            }
        }
    }
}

publish.dependsOn(publishScanPackage)
