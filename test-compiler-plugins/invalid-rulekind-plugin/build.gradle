/*
 * Copyright (c) 2024, WSO2 LLC. (https://www.wso2.com).
 *
 * WSO2 LLC. licenses this file to you under the Apache License,
 * Version 2.0 (the "License"); you may not use this file except
 * in compliance with the License.
 * You may obtain a copy of the License at
 *
 *   http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing,
 * software distributed under the License is distributed on an
 * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
 * KIND, either express or implied. See the License for the
 * specific language governing permissions and limitations
 * under the License.
 */

import org.apache.tools.ant.taskdefs.condition.Os

plugins {
    id 'java-library'
    id 'checkstyle'
    id "com.github.spotbugs"
    id "de.undercouch.download"
}

group = 'org.invalid.rulekind'
version = "0.1.0"

repositories {
    mavenLocal()
    mavenCentral()

    maven {
        url = uri('https://repo.maven.apache.org/maven2/')
    }

    maven {
        url = 'https://maven.pkg.github.com/ballerina-platform/*'
        credentials {
            username System.getenv("packageUser")
            password System.getenv("packagePAT")
        }
    }
}

dependencies {
    implementation "com.google.code.gson:gson:${gsonVersion}"
    implementation group: 'org.ballerinalang', name: 'ballerina-lang', version: "${ballerinaLangVersion}"
    implementation group: 'org.ballerinalang', name: 'ballerina-parser', version: "${ballerinaLangVersion}"
    implementation group: 'org.ballerinalang', name: 'ballerina-runtime', version: "${ballerinaLangVersion}"
    implementation group: 'org.ballerinalang', name: 'ballerina-tools-api', version: "${ballerinaLangVersion}"
    implementation group: 'org.ballerinalang', name: 'jballerina-tools', version: "${ballerinaLangVersion}"
    implementation group: 'org.ballerinalang', name: 'ballerina-cli', version: "${ballerinaLangVersion}"
    implementation group: 'org.ballerinalang', name: 'toml-parser', version: "${ballerinaLangVersion}"

    checkstyle group: 'com.puppycrawl.tools', name: 'checkstyle', version: "${puppycrawlCheckstyleVersion}"

    // Adding dependency to the scan-command module to use interfaces
    implementation project(':scan-command')
}

tasks.withType(JavaExec).configureEach {
    systemProperty 'ballerina.home', System.getenv("BALLERINA_HOME")
}

// Setting up checkstyles
tasks.register('downloadCheckstyleRuleFiles', Download) {
    src([
            'https://raw.githubusercontent.com/wso2/code-quality-tools/v1.4/checkstyle/jdk-17/checkstyle.xml',
            'https://raw.githubusercontent.com/wso2/code-quality-tools/v1.4/checkstyle/jdk-17/suppressions.xml'
    ])
    overwrite false
    onlyIfNewer true
    dest buildDir
}

artifacts.add('default', file("${project.buildDir}/checkstyle.xml")) {
    builtBy(downloadCheckstyleRuleFiles)
}

artifacts.add('default', file("${project.buildDir}/suppressions.xml")) {
    builtBy(downloadCheckstyleRuleFiles)
}

def excludePattern = '**/module-info.java'
tasks.withType(Checkstyle).configureEach {
    exclude excludePattern
}

checkstyle {
    toolVersion "${project.puppycrawlCheckstyleVersion}"
    configFile rootProject.file("${project.buildDir}/checkstyle.xml")
    configProperties = ["suppressionFile": file("${project.buildDir}/suppressions.xml")]
}

checkstyleMain.dependsOn(downloadCheckstyleRuleFiles)
checkstyleTest.dependsOn(downloadCheckstyleRuleFiles)

// Setting up spotbugs
spotbugsMain {
    effort "max"
    reportLevel "low"

    reportsDir = file("$project.buildDir/reports/spotbugs")

    reports {
        html.required.set(true)
        text.required.set(true)
    }

    def excludeFile = file("${projectDir}/spotbugs-exclude.xml")
    if (excludeFile.exists()) {
        excludeFilter = excludeFile
    }
}

spotbugsTest {
    effort = "max"
    reportLevel = "low"

    reportsDir = file("$project.buildDir/reports/spotbugs")

    reports {
        html.required.set(true)
        text.required.set(true)
    }

    def excludeFile = file("${projectDir}/spotbugs-exclude.xml")
    if (excludeFile.exists()) {
        excludeFilter = excludeFile
    }
}

// Configurations to automatically build and deploy custom static code analyzer compiler plugin
def packageOrg = "invalid"
def packageName = "invalid_module_rulekind_static_code_analyzer"
def pluginCentralDirectory = System.getProperty("user.home") + "/.ballerina/repositories/central.ballerina.io/bala/${packageOrg}"
def pluginLocalDir = System.getProperty("user.home") + "/.ballerina/repositories/local/bala/${packageOrg}"
def balCentralCacheDir = project.file(System.getProperty("user.home") + "/.ballerina/repositories/central.ballerina.io")

tasks.register('buildCompilerPlugin') {
    doLast {
        // Pack and push to local repo of distribution
        exec {
            if (Os.isFamily(Os.FAMILY_WINDOWS)) {
                commandLine 'cmd', '/c', 'cd invalid-module-rulekind-static-code-analyzer & bal pack & bal push --repository=local'
            } else {
                commandLine 'sh', '-c', 'cd invalid-module-rulekind-static-code-analyzer ; bal pack ; bal push --repository=local'
            }
        }
        println("Successfully build and pushed the package ${packageOrg}/${packageName} to the local repository")

        // Remove the cache directories in the central repository
        delete {
            fileTree(balCentralCacheDir).matching {
                include 'cache-*'
            }
        }
        println("Successfully cleaned the .ballerina/cache* directories")

        // Update the central repository
        def balDestinationDir = "$pluginCentralDirectory/$packageName"
        def balSourceDir = "$pluginLocalDir/$packageName"
        if (file(balDestinationDir).exists()) {
            file(balDestinationDir).deleteDir()
        }
        copy {
            from balSourceDir
            into balDestinationDir
        }
        println("Successfully copied package ${packageOrg}/${packageName} from local/bala the central.ballerina.io/bala directory")
    }
}

build {
    dependsOn buildCompilerPlugin
}
